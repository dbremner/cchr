#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "logical.h"
#include "leq_cchr.h"

typedef struct {
  cchr_htdc_t leq_2_arg1;
  cchr_htdc_t leq_2_arg2;
} log_int_t_tag_t;

#define log_int_cb_created(tag) {cchr_htdc_t_init(&(tag->leq_2_arg1)); cchr_htdc_t_init(&(tag->leq_2_arg1));}
#define log_int_cb_merged(tag1,tag2) {cchr_htdc_t_addall(&(tag1->leq_2_arg1),&(tag2.leq_2_arg1));cchr_htdc_t_addall(&(tag1->leq_2_arg2),&(tag2.leq_2_arg2));}
#define log_int_cb_gotval(val,tag)
#define log_int_cb_destr(val,tag) {cchr_htdc_t_free(&(tag.leq_2_arg1)); cchr_htdc_t_free(&(tag.leq_2_arg1));}

logical_code(int,log_int_t_tag_t,log_int_t,log_int_cb)

cchr {
  constraint leq(log_int_t,log_int_t) 
    init({log_int_t_copy($1);log_int_t_copy($2);}) 
    destr({log_int_t_destruct($1);log_int_t_destruct($2);}) 
    fmt("leq(%p,%p)") 
    add({cchr_idxlist_t nw;nw.pid=CSM_PID($0); nw.id=CSM_IDOFPID($0); cchr_htdc_t_set(&(log_int_t_getextrap($1)->leq_2_arg1),&nw);cchr_htdc_t_set(&(log_int_t_getextrap($2)->leq_2_arg2),&nw);})
    kill({cchr_idxlist_t nw; nw.pid=CSM_PID($0); nw.id=CSM_IDOFPID($0); cchr_htdc_t_unset(&(log_int_t_getextrap($1)->leq_2_arg1),&nw);cchr_htdc_t_unset(&(log_int_t_getextrap($2)->leq_2_arg2),&nw);});
  
  extern eq;
  
  logical log_int_t log_int_cb;
  macro eq(log_int_t,log_int_t) log_int_t_testeq($1,$2);
  
  reflexivity @ leq(X,Y) <=> eq(X,Y) | true;
  antisymmetry @ leq(X1,Y1), leq(Y2,X2) <=> eq(X1,X2),eq(Y1,Y2) | {log_int_t_seteq(X1,Y1);cchr_reactivate_all(NULL);};
  idempotence @ leq(X1,Y1) \ leq(X2,Y2) <=> eq(X1,X2),eq(Y1,Y2) | true;
  transitivity @ leq(X,Y1), leq(Y2,Z) ==> eq(Y1,Y2) | leq(X,Z);
}

void test(int size) {
  cchr_runtime_init();
  log_int_t *vars=malloc(sizeof(log_int_t)*size);
  for (int j=0; j<size; j++) vars[j]=log_int_t_create();
  for (int j=0; j<size; j++) cchr_add_leq_2(vars[j],vars[(j+1)%size]);
  fprintf(stderr,"done!\n");
  int aj=0;
  cchr_consloop(j,leq_2,{fprintf(stderr,"outch %i (%p,%p)!\n",aj++,cchr_consarg(j,leq_2,1),cchr_consarg(j,leq_2,2));});
  for (int j=0; j<size; j++) {
    if (!log_int_t_testeq(vars[j],vars[(j+1)%size])) fprintf(stderr,"noteq %i %i\n",j,j+1);
  }
  cchr_runtime_free();
  for (int j=0; j<size; j++) log_int_t_destruct(vars[j]);
  free(vars);
}

int main(void) {
  test(100);
  return 0;
}
