#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef enum { ADD,SUB,MULT,DIV,MOVE,I_MOVE,MOVE_I,CONST,JUMP,CJUMP,HALT } instr_t;

cchr {
	constraint mem(int, int), 
	prog(int,int,instr_t,int,int), 
	prog_counter(int);
	
	extern ADD,SUB,MULT,DIV,MOVE,I_MOVE,MOVE_I,CONST,JUMP,CJUMP,HALT;
		
	constraint initmem(int);
	
	// add value of register B to register A
	prog(L,L1,ADD,B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> mem(A,X+Y), prog_counter(L1);
	// subtract value of register B from register A
	prog(L,L1,SUB,B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> mem(A,X-Y), prog_counter(L1);
	// multiply register A with value of register B
	prog(L,L1,MULT,B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> mem(A,X*Y), prog_counter(L1);
	// divide register A by value of register B
	prog(L,L1,DIV,B,A), mem(B,Y) \ mem(A,X), prog_counter(L) <=> mem(A,X/Y), prog_counter(L1);

	// put the value in register B in register A
	prog(L,L1,MOVE,B,A), mem(B,X) \ mem(A,_), prog_counter(L) <=> mem(A,X), prog_counter(L1);
	// put the value in register <value in register B> in register A
	prog(L,L1,I_MOVE,B,A), mem(B,C), mem(C,X) \ mem(A,_), prog_counter(L) <=> mem(A,X), prog_counter(L1);
	// put the value in register B in register <value in register A>
	prog(L,L1,MOVE_I,B,A), mem(B,X), mem(A,C) \ mem(C,_), prog_counter(L) <=> mem(C,X), prog_counter(L1);

	// put the value B in register A        -> redundant if consts are in init mem
	prog(L,L1,CONST,B,A) \ mem(A,_), prog_counter(L) <=> mem(A,B), prog_counter(L1);

	// unconditional jump to label A
	prog(L,L1,Instr,_,A) \ prog_counter(L) <=> Instr == JUMP | prog_counter(A);
	// jump to label A if register R is zero, otherwise continue
	prog(L,_,CJUMP,R,A), mem(R,X) \ prog_counter(L) <=> X == 0 | prog_counter(A);
	prog(L,L1,CJUMP,R,A), mem(R,X) \ prog_counter(L) <=> X != 0 | prog_counter(L1);
	// halt
	prog(L,L1,Instr,_,_) \ prog_counter(L) <=> Instr == HALT | true;

	// invalid instruction
	prog_counter(L) <=> {printf("eeeeik! error!!!\n");};
		
	initmem(N) <=> N < 0  | true;
	initmem(N) <=> N >= 0 | mem(N,0), initmem(N-1);
}

int main(int argc, char **argv) {
  cchr_runtime_init();
  int N=(argc>1 ? (int)strtol(argv[1],NULL,0) : 100);
  cchr_add_mem_2(1,1);
  cchr_add_mem_2(2,N);
  cchr_add_mem_2(3,0);
  cchr_add_prog_5(1,2,ADD,1,3);
  cchr_add_prog_5(2,3,SUB,1,2);
  cchr_add_prog_5(3,1,CJUMP,2,4);
  cchr_add_prog_5(4,0,HALT,0,0);
  cchr_add_prog_counter_1(1);
  int mem[4];
  cchr_consloop(j,mem_2,{printf("mem(%i,%i)\n",cchr_consarg(j,mem_2,1),cchr_consarg(j,mem_2,2)); int p=cchr_consarg(j,mem_2,1); if (p<4) mem[p]=cchr_consarg(j,mem_2,2);});
  if (mem[1]==1 && mem[2]==0 && mem[3]==N) printf("ok!\n");
  cchr_runtime_free();
  return 0;
}
